[{ "id": 1484608093878, "text": "Why is SQL injection a type of web application vulnerability?", "answers": [{ "text": "SQL injection attacker could use and present a SQL command to recover the database data", "isValid": false }, { "text": "An attack mostly occurs when a web application executes by using the user-provided data without validating", "isValid": false }, { "text": "SQL injection could give access to sensitive information", "isValid": false }, { "text": "All of the above", "isValid": true }], "note": "An attacker can manipulate and submit a SQL command to retrieve the database information. Attacks mostly occur when a web application executes by using the user-provided data without validating or encoding it. It can give access to sensitive information such as social security numbers, credit card numbers, or other financial data to the attacker and allows an attacker to create, read, update, alter, or delete data stored in the backend database.", "type": "MULTIPLE_CHOICE", "preserveOrder": true }, { "id": 1484608167356, "text": "Which are steps taken to perform SQL injection attacks?", "answers": [{ "text": "A) Authentication bypass", "isValid": false }, { "text": "B) Spread the valid information", "isValid": false }, { "text": "C) Compromise data integrity and possible information disclosure", "isValid": false }, { "text": "D) Take remote code execution", "isValid": false }, { "text": "E) A & C", "isValid": true }], "note": "An attacker could enter into the network without providing any authentic username or password and could gain the access over the network. He or she can get the highest privilege in the network. After unauthorized entry into the network, the attacker gets access to the sensitive data stored in the database and could possibly amend or disclose it to others.", "type": "MULTIPLE_CHOICE", "preserveOrder": true }, { "id": 1484608225976, "text": "Which of the following statement is incorrect for how web applications work?", "answers": [{ "text": "First user sends requests for data.", "isValid": false }, { "text": "The web server immediately checks the user IP address.", "isValid": true }, { "text": "The web server sends the request to the applicable server.", "isValid": false }, { "text": "The web application server performs the requested task and sends the requested data through the web server.", "isValid": false }], "note": "The web server never checks the user IP address. Good job, please continue to the next question.", "type": "MULTIPLE_CHOICE", "preserveOrder": false }, { "id": 1484608295130, "text": "Which of the following statement is incorrect for detecting a SQL injection?", "answers": [{ "text": "The web application connects to a database server in order to access some data", "isValid": false }, { "text": "SQL injection never detects the hidden fields", "isValid": true }, { "text": "It will display all input fields and post requests whose values could be used in crafting a SQL query", "isValid": false }, { "text": "Attempt to inject codes into the input fields to generate an error", "isValid": false }, { "text": "Try to insert a string value where a number is expected in the input field", "isValid": false }], "note": "SQL injection detects all hidden fields and displays the attacker.", "type": "MULTIPLE_CHOICE", "preserveOrder": false }, { "id": 1484608345994, "text": "Which are additional methods used to detect a SQL injection?", "answers": [{ "text": "Functional Testing", "isValid": false }, { "text": "Fuzz Testing", "isValid": false }, { "text": "Killall task testing", "isValid": false }, { "text": "All of the above", "isValid": true }], "note": "This testing falls within the scope of black-box testing, and as such, should require no knowledge of the inner design of the code or logic. Fuzz testing is a SQL injection testing technique used to discover coding errors by inputting a massive amount of data to crash the web application. Static/dynamic testing is the manual analysis of the web application source code.", "type": "MULTIPLE_CHOICE", "preserveOrder": true }, { "id": 1484608425472, "text": "What will you detect if you run a SQL injection black-box pentest?", "answers": [{ "text": "SQL injection Issues", "isValid": false }, { "text": "Input sanitization", "isValid": false }, { "text": "SQL modification", "isValid": false }, { "text": "Truncation issues", "isValid": false }, { "text": "All of the above", "isValid": true }], "note": "A. Send single quotes as the input data to catch instances where the user input is not sanitized. Send double quotes as the input data to catch instances where the user is not sanitized. B. Use the right square bracket (the ] character) as the input data to catch instances where the user input is used as part of a SQL identifier without any input sanitization. C. Send long strings of single quote characters (or right square brackets or double quotes). These max out the return values from REPLACE and QUOTENAME functions and might truncate the command variable used to hold the SQL statement.", "type": "MULTIPLE_CHOICE", "preserveOrder": true }, { "id": 1484608483420, "text": "What are the major types of SQL injection?", "answers": [{ "text": " A. Blind SQL injection", "isValid": false }, { "text": "B. Input SQL Injection", "isValid": false }, { "text": "C. Simple SQL injection", "isValid": false }, { "text": "D. Smart SQL Injection", "isValid": false }, { "text": "E. Answers A and C", "isValid": true }], "note": "Wherever there is web application vulnerability, blind SQL injection can be used either to access the sensitive data or to destroy the data. The attacker can steal the data by asking a series of true or false questions through SQL statements. A simple SQL injection script builds a SQL query by concatenating hard-coded strings together with a string entered by the user.", "type": "MULTIPLE_CHOICE", "preserveOrder": true }, { "id": 1484608530958, "text": "What are the simple SQL injection types?", "answers": [{ "text": "A. UNION SQL injection", "isValid": false }, { "text": "B. Error-based SQL injection", "isValid": false }, { "text": "C. Both A and B", "isValid": true }, { "text": "D. None of these", "isValid": false }], "note": "UNION SQL injection is used when the user uses the UNION command. The attacker makes use of the database-level error messages disclosed by an application in an error-based SQL injection. This is very useful for building a vulnerability exploit request.", "type": "MULTIPLE_CHOICE", "preserveOrder": true }, { "id": 1484608596289, "text": "What are the various elements associated with simple SQL injection attacks?", "answers": [{ "text": "System stored procedure", "isValid": false }, { "text": "End of line comment", "isValid": false }, { "text": "Illegal/logically incorrect query", "isValid": false }, { "text": "Tautology", "isValid": false }, { "text": "All of the above", "isValid": true }], "note": "A. Attackers exploit database stored procedures to perpetuate their attacks. B. After injecting code into a particular field, any legitimate code that follows is nullified through the use of end of line comments. D. An attacker may gain knowledge by injecting illegal/logically incorrect requests such as injectable parameters, data types, names of tables, etc. E. Tautology is injecting statements that are always true so that queries always return results upon evaluation of a WHERE condition.", "type": "MULTIPLE_CHOICE", "preserveOrder": true }, { "id": 1484608660339, "text": "How it is blind SQL injection different from simple SQL injection?", "answers": [{ "text": "Blind injection is not dependent on error messages", "isValid": false }, { "text": "Blind SQL injection can destroy the data", "isValid": false }, { "text": "Blind SQL injection attacks could become time-intensive", "isValid": false }, { "text": "A blind SQL injection attack tries to exploit an application instead of showing an error message", "isValid": false }, { "text": "All of the above", "isValid": true }], "note": "Blind SQL injection is used when a web application is vulnerable to SQL injection. SQL injection depends on error messages but blind injections are not dependent on error messages. Blind SQL injection can be used to either access sensitive data or to destroy the data. Blind SQL injection could be time-intensive because a new statement must be crafted for each bit recovered. Blind SQL injection is identical to a normal SQL injection except that when an attacker attempts to exploit an application rather than show a useful error message.", "type": "MULTIPLE_CHOICE", "preserveOrder": true }, { "id": 1484608722619, "text": "How can an attacker extract information through error messages?", "answers": [{ "text": "A. Grouping error", "isValid": false }, { "text": "B. Type mismatch error", "isValid": false }, { "text": "C. Blind injection", "isValid": false }, { "text": "D. None of these", "isValid": false }, { "text": "E. Answers A, B and C", "isValid": true }], "note": "A. The HAVING command allows further defining of a query based on the \"grouped\" fields. B. Try to insert strings into numeric fields. C. The attacker uses time delays or error signatures to determine extract information.", "type": "MULTIPLE_CHOICE", "preserveOrder": true }, { "id": 1484608956165, "text": "Which of the following statements is incorrect about password grabbing?", "answers": [{ "text": "An attacker first destroys the database, then captures the login credentials", "isValid": true }, { "text": "Once the password is grabbed, the attacker may destroy the data", "isValid": false }, { "text": "Once the password is grabbed, the attacker might stay", "isValid": false }, { "text": "Once the password is grabbed, the attacker might steal the information", "isValid": false }, { "text": "Attackers might succeed in escalating privileges up to the admin level", "isValid": false }], "note": "An attacker never destroys the database upfront. First, he or she will capture the login credential, then destroy the information from database.", "type": "MULTIPLE_CHOICE", "preserveOrder": false }, { "id": 1484609026578, "text": "Which of the following statements is/are correct about grabbing SQL server hashes?", "answers": [{ "text": "A. Hashes can possibly be extracted from error messages", "isValid": false }, { "text": "B. Hashes will be converted into hexadecimal format", "isValid": false }, { "text": "C. Converted hashes will be displayed as error messages", "isValid": false }, { "text": "D. None of these", "isValid": false }, { "text": "E. Answers A, B and C", "isValid": true }], "note": "A. An attacker tries to extract hashes through error messages during the attack. B. The attacker converts the hashes into hexadecimal format, which were previously in binary code. C. Once the attacker is done with the conversion process, the hashes will be displayed as error messages.", "type": "MULTIPLE_CHOICE", "preserveOrder": true }, { "id": 1484609085236, "text": "What should be done to defend against SQL injection attacks?", "answers": [{ "text": "A. Test the size and data type of input and enforce the rules", "isValid": false }, { "text": "B. Reject entries that contain binary data", "isValid": false }, { "text": "C. Never build Transact-SQL statements directly. Implement multiple layers of validation.", "isValid": false }, { "text": " D. None of the above", "isValid": false }, { "text": "E. Answers A, B and C", "isValid": true }], "note": "A. Make no assumptions about the size, type, or content of the data that is received by your application. Test the size and data type of input and enforce appropriate limits to prevent buffer overruns. B. Reject entries that contain binary data, escape sequences, and comment characters. C. Never build Transact-SQL statements directly from user input and use stored procedures to validate user input. Implement multiple layers of validation and never concatenate user input that is not validated.", "type": "MULTIPLE_CHOICE", "preserveOrder": true }, { "id": 1484609149353, "text": "Which of the following is not a SQL injection attack characters?", "answers": [{ "text": "\"or\" for character string indicators", "isValid": false }, { "text": "-- or # for single-line comment", "isValid": false }, { "text": "/*…*/ for multiple-line comment", "isValid": false }, { "text": "++ for addition and concatenation (or space in URL)", "isValid": true }, { "text": "% for wildcard attribute indicator", "isValid": false }], "note": "Only a single + is used, not ++.", "type": "MULTIPLE_CHOICE", "preserveOrder": false }, { "id": 1484609211339, "text": "What are the various stages of SQL injection methodology?", "answers": [{ "text": "A. Information gathering and SQL injection vulnerability detection", "isValid": false }, { "text": " B. Launch SQL injection attack", "isValid": false }, { "text": " C. Compromise the system and potentially extract the data", "isValid": false }, { "text": "D. All of the above", "isValid": true }], "note": "The attacker first gathers all the required information he or she needs and identifies the SQL injection vulnerabilities before the SQL injection attack.Wherever there is weak authentication, that will be the main source for the attacker to enter into the network and by exploiting the authentication rules, the attacker injects the malicious code of SQL injection. The attacker gets access to the network as a privileged user and will be able to compromise the system and extract the sensitive data from the network.", "type": "MULTIPLE_CHOICE", "preserveOrder": true }, { "id": 1484609296391, "text": "Which of the following statements is/are correct about evading IDSs?", "answers": [{ "text": "Evasion techniques used to obscure input strings", "isValid": false }, { "text": "A database of SQL injection attack strings will be built", "isValid": false }, { "text": "Input strings will be compared against the signature database at runtime to detect attacks", "isValid": false }, { "text": "All of the above", "isValid": true }], "note": "Attackers use evasion techniques to obscure input strings. Signature-based detection systems build a database of SQL injection attack strings. Then compare input strings against the signature database at runtime to detect attacks. Provided information matches the attack signatures present in the database, then it immediately sets off an alarm.", "type": "MULTIPLE_CHOICE", "preserveOrder": true }, { "id": 1484609377533, "text": "How do you defend against SQL injection attacks?", "answers": [{ "text": "A. Minimizing privileges", "isValid": false }, { "text": "B. Implementing consistent coding standards", "isValid": false }, { "text": "C. Firewalling the SQL server", "isValid": false }, { "text": "D. Minimize the security code", "isValid": false }, { "text": "E. Answers A, B and C", "isValid": true }], "note": "A. It is important to create a low-privilege account first, and begin to add permissions only as they are needed. B. Coding standards that include how we may avoid SQL injection attacks must be in place and enforced. C. It is a good idea to firewall the server so that only trusted clients can contact it. In most web environments, the only hosts that need to connect to SQL server are the administrative network and the web server(s) that it services.", "type": "MULTIPLE_CHOICE", "preserveOrder": true }, { "id": 1484609431691, "text": "Which of the following tools cannot detect SQL injection?", "answers": [{ "text": "Microsoft Source Code Analyzer", "isValid": false }, { "text": "IBM Security AppScan", "isValid": false }, { "text": "WebCruiser", "isValid": false }, { "text": "Burpsuite", "isValid": true }], "note": "This tool will work for session hijacking not detecting SQL injection.", "type": "MULTIPLE_CHOICE", "preserveOrder": false }]